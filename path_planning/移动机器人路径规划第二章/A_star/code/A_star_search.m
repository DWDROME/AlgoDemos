function [path,OPEN] = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);

    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(~isempty(OPEN)) %you have to dicide the Conditions for while loop exit 
        i_min = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        % if ~i_min
        %      print("失败了");
        % end
        
        OPEN(i_min,1) = 0;
        CLOSED_COUNT = CLOSED_COUNT + 1;
        CLOSED(CLOSED_COUNT,1:2)=OPEN(i_min,2:3);
        
        node_x = OPEN(i_min,2);
        node_y = OPEN(i_min,3);
    
        if node_x==xTarget && node_y==yTarget
            NoPath=0;
            xval = xTarget;
            yval = yTarget;
            break;
        end
        
        exp_array=expand_array(node_x,node_y,OPEN(i_min,7),xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
        exp_array_count = size(exp_array,1);
        exp_node(1,1:5) = 0;
        for i = 1:exp_array_count
            index = isInOpen(exp_array(i,1),exp_array(i,2),OPEN,OPEN_COUNT);
            if index <= 0
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT,1) = 1;
                OPEN(OPEN_COUNT,2:3) = exp_array(i,1:2);
                OPEN(OPEN_COUNT,4) = node_x;
                OPEN(OPEN_COUNT,5) = node_y;
                OPEN(OPEN_COUNT,6:8) = exp_array(i,3:5);
            else 
                if OPEN(index, 7) > exp_array(i,4)  %根据g值比较
                    exp_node(1,1:5) = exp_array(i,1:5);
                    OPEN(index,2:3) = exp_array(i,1:2);
                    OPEN(index,4) = node_x;
                    OPEN(index,5) = node_y;
                    OPEN(index,6:8) = exp_array(i,3:5);
                end
            end
        end
    end
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   if NoPath
        print("找不到对应的路径")
    else
        path = [];
        while true
            path = [xval yval;path];
            n_index = node_index(OPEN,xval,yval);
            xval = OPEN(n_index,4);
            yval = OPEN(n_index,5);
            if(xval == xStart && yval == yStart)
                path = [xval yval;path];
                break;
            end
        end
    end
end
